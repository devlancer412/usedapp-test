/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTEXV3Interface extends utils.Interface {
  functions: {
    "bid(bytes32)": FunctionFragment;
    "bulkCancel(bytes32[])": FunctionFragment;
    "bulkClaim(bytes32[])": FunctionFragment;
    "bulkList(address,uint256[],uint256,uint256,uint256,uint256)": FunctionFragment;
    "buyItNow(bytes32)": FunctionFragment;
    "cancelOrder(bytes32)": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "dutchAuction(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "englishAuction(address,uint256,uint256,uint256)": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "fixedPrice(address,uint256,uint256,uint256)": FunctionFragment;
    "getCurrentPrice(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderIdBySeller(address,uint256)": FunctionFragment;
    "orderIdByToken(address,uint256,uint256)": FunctionFragment;
    "orderInfo(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellerOrderLength(address)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "tokenOrderLength(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeePercent(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bid"
      | "bulkCancel"
      | "bulkClaim"
      | "bulkList"
      | "buyItNow"
      | "cancelOrder"
      | "claim"
      | "dutchAuction"
      | "englishAuction"
      | "feeAddress"
      | "feePercent"
      | "fixedPrice"
      | "getCurrentPrice"
      | "onERC721Received"
      | "orderIdBySeller"
      | "orderIdByToken"
      | "orderInfo"
      | "owner"
      | "renounceOwnership"
      | "sellerOrderLength"
      | "setFeeAddress"
      | "tokenOrderLength"
      | "transferOwnership"
      | "updateFeePercent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCancel",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkClaim",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItNow",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dutchAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "englishAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdBySeller",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdByToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerOrderLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOrderLength",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkCancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyItNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "englishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "Bid(address,uint256,bytes32,address,uint256)": EventFragment;
    "CancelOrder(address,uint256,bytes32,address)": EventFragment;
    "Claim(address,uint256,bytes32,address,address,uint256)": EventFragment;
    "MakeOrder(address,uint256,bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BidEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  bidder: string;
  bidPrice: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface CancelOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type CancelOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface ClaimEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
  taker: string;
  price: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface MakeOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type MakeOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  MakeOrderEventObject
>;

export type MakeOrderEventFilter = TypedEventFilter<MakeOrderEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTEXV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTEXV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkCancel(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkClaim(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkList(
      _token: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItNow(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[number]>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        orderType: number;
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        isSold: boolean;
        isCancelled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    _order: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkCancel(
    _ids: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkClaim(
    _ids: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkList(
    _token: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _startPrice: PromiseOrValue<BigNumberish>,
    _endPrice: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    _type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItNow(
    _order: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    _order: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _order: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dutchAuction(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _endPrice: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  englishAuction(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<number>;

  fixedPrice(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPrice(
    _order: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderIdBySeller(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderIdByToken(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean
    ] & {
      orderType: number;
      seller: string;
      token: string;
      tokenId: BigNumber;
      startPrice: BigNumber;
      endPrice: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      lastBidPrice: BigNumber;
      lastBidder: string;
      isSold: boolean;
      isCancelled: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellerOrderLength(
    _seller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFeeAddress(
    _feeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenOrderLength(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeePercent(
    _percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkCancel(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkClaim(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkList(
      _token: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItNow(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<number>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        orderType: number;
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        isSold: boolean;
        isCancelled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Bid(address,uint256,bytes32,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      bidPrice?: null
    ): BidEventFilter;
    Bid(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      bidPrice?: null
    ): BidEventFilter;

    "CancelOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: PromiseOrValue<string> | null
    ): CancelOrderEventFilter;
    CancelOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: PromiseOrValue<string> | null
    ): CancelOrderEventFilter;

    "Claim(address,uint256,bytes32,address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: PromiseOrValue<string> | null,
      price?: null
    ): ClaimEventFilter;
    Claim(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: PromiseOrValue<string> | null,
      price?: null
    ): ClaimEventFilter;

    "MakeOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: PromiseOrValue<string> | null
    ): MakeOrderEventFilter;
    MakeOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: PromiseOrValue<string> | null
    ): MakeOrderEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkCancel(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkClaim(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkList(
      _token: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItNow(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkCancel(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkClaim(
      _ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkList(
      _token: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItNow(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeePercent(
      _percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
